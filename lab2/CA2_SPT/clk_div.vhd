-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2003 Altera Corporation
-- Any  megafunction  design,  and related netlist (encrypted  or  decrypted),
-- support information,  device programming or simulation file,  and any other
-- associated  documentation or information  provided by  Altera  or a partner
-- under  Altera's   Megafunction   Partnership   Program  may  be  used  only
-- to program  PLD  devices (but not masked  PLD  devices) from  Altera.   Any
-- other  use  of such  megafunction  design,  netlist,  support  information,
-- device programming or simulation file,  or any other  related documentation
-- or information  is prohibited  for  any  other purpose,  including, but not
-- limited to  modification,  reverse engineering,  de-compiling, or use  with
-- any other  silicon devices,  unless such use is  explicitly  licensed under
-- a separate agreement with  Altera  or a megafunction partner.  Title to the
-- intellectual property,  including patents,  copyrights,  trademarks,  trade
-- secrets,  or maskworks,  embodied in any such megafunction design, netlist,
-- support  information,  device programming or simulation file,  or any other
-- related documentation or information provided by  Altera  or a megafunction
-- partner, remains with Altera, the megafunction partner, or their respective
-- licensors. No other licenses, including any licenses needed under any third
-- party's intellectual property, are provided herein.


-- Generated by Quartus II Version 3.0 (Build Build 223 08/14/2003)
-- Created on Mon Jan 05 00:03:30 2004

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;


--  Entity Declaration

--
-- Takte und Frequenzen
-- Eingangstakt: clk_fast:  Periodendauer T_fast
-- CPU-Takt:     clk_cpu_f: Periodendauer T_cpu    laeuft immer !!
--
-- T_cpu = T_fast * 2**(no_div_stages)
--

-- Hochschule Esslingen, Fakultaet IT
-- (C) 2013 R. Keller, W. Lindermeir, W. Zimmermann 

ENTITY clk_div IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	GENERIC(no_div_stages : natural:= 1 );
	PORT
	(
		clk_fast : IN STD_LOGIC;
		clk_cpu_f : OUT STD_LOGIC
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
END clk_div;


--  Architecture Body

ARCHITECTURE clk_div_architecture OF clk_div IS

SUBTYPE states IS natural RANGE 0 TO 2**no_div_stages-1;
SIGNAL state      : states;
SIGNAL next_state : states;
signal int_clk    : std_logic;

BEGIN

seq: PROCESS (clk_fast)
BEGIN
  IF(clk_fast'event AND clk_fast='1')THEN
      state <= next_state;
  END IF;
END PROCESS; --seq

combinational: Process(state)
BEGIN
  -- next state 
  IF(state >= 2**no_div_stages-1) THEN
     next_state <= 0;
  ELSE
     next_state <= state + 1;
  END IF;

  -- Ausgabe langsamer Takt fuer die CPU
  IF state < 2**(no_div_stages-1)  THEN
     int_clk <= '1';
  ELSE
     int_clk <= '0';
  END IF;

END Process; --combinational

-- Ausgabetakt mit clk_fast ausgeben
dff_clk: PROCESS (clk_fast)
BEGIN
  IF(clk_fast'event AND clk_fast='1')THEN
      clk_cpu_f <= int_clk;
  END IF;
END PROCESS; --dff_clk

END clk_div_architecture;
